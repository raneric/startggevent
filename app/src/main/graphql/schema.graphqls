type Query {
    currentUser: User
    tournament(id: ID, slug: String): Tournament
    tournaments(query: TournamentQuery!): TournamentConnection
}

input TournamentQuery {
    page: Int
    perPage: Int
    sortBy: String
    filter: TournamentPageFilter
}

input TournamentPageFilter {
    id: ID
    ids: [ID]
    # ID of the user that owns this tournament.
    ownerId: ID
    # If true, filter to only tournaments the currently authed user is an admin of
    isCurrentUserAdmin: Boolean
    countryCode: String
    addrState: String
    afterDate: Timestamp
    beforeDate: Timestamp
    computedUpdatedAt: Timestamp
    name: String
    venueName: String
    isFeatured: Boolean
    isLeague: Boolean
    hasBannerImages: Boolean
    activeShops: Boolean
    regOpen: Boolean
    past: Boolean
    published: Boolean
    publiclySearchable: Boolean
    staffPicks: Boolean
    hasOnlineEvents: Boolean
    upcoming: Boolean
    videogameIds: [ID]
    sortByScore: Boolean
}

type Tournament {
    id: ID
    addrState: String
    # Admin-only view of admins for this tournament
    #
    # Arguments
    # roles: Which roles to show
    admins(roles: [String]): [User]
    city: String
    countryCode: String
    # When the tournament was created (unix timestamp)
    createdAt: Timestamp
    currency: String
    # When the tournament ends
    endAt: Timestamp
    # When does event registration close
    eventRegistrationClosesAt: Timestamp

    # True if tournament has at least one offline event
    hasOfflineEvents: Boolean
    hasOnlineEvents: Boolean
    hashtag: String
    # Arguments
    # type: [Not documented]
    images(type: String): [Image]
    # True if tournament has at least one online event
    isOnline: Boolean
    # Is tournament registration open
    isRegistrationOpen: Boolean
    lat: Float
    lng: Float
    mapsPlaceId: String
    # The tournament name
    name: String
    # Number of attendees including spectators, if public
    numAttendees: Int
    # The user who created the tournament
    owner: User

    events(limit: Int, filter: EventFilter): [Event]

    postalCode: String
    primaryContact: String
    primaryContactType: String
    # Publishing settings for this tournament
    # When does registration for the tournament end
    registrationClosesAt: Timestamp
    rules: String
    # The short slug used to form the url
    shortSlug: String
    # The slug used to form the url
    slug: String
    # When the tournament Starts
    startAt: Timestamp
    # State of the tournament, can be ActivityState::CREATED, ActivityState::ACTIVE,
    # or ActivityState::COMPLETED
    state: Int

    # When is the team creation deadline
    teamCreationClosesAt: Timestamp

    # The timezone of the tournament
    timezone: String
    # The type of tournament from TournamentType
    tournamentType: Int
    # When the tournament was last modified (unix timestamp)
    updatedAt: Timestamp
    # Build Tournament URL
    #
    # Arguments
    # tab: Tournament tab to add to URL
    # relative: Generate a relative URL. Defaults to true. Setting to
    # false will generate an absolute URL
    url(tab: String, relative: Boolean): String
    venueAddress: String
    venueName: String
    # List of all waves in this tournament
    waves: [Wave]
}

type User {

    id: ID
    bio: String
    # Public facing user birthday that respects user publishing settings
    birthday: String
    # Uniquely identifying token for user. Same as the hashed part of the slug
    discriminator: String
    email: String
    genderPronoun: String
    # Arguments
    # type: [Not documented]
    images(type: String): [Image]

    # Public facing user name that respects user publishing settings
    name: String
    # player for user
    player: Player
    slug: String
    # Tournaments this user is organizing or competing in
    #
    # Arguments
    # query: [Not documented]
    tournaments(query: UserTournamentsPaginationQuery): TournamentConnection
}

type TournamentConnection {
    pageInfo: PageInfo
    nodes: [Tournament]
}

type Image {
    id: ID
    height: Float
    ratio: Float
    type: String
    url: String
    width: Float
}

type Player {
    id: ID
    gamerTag: String
    prefix: String
}

type Wave {
    id: ID
    # The Wave Identifier
    identifier: String
    # Unix time the wave is scheduled to start.
    startAt: Timestamp
}

type Event {
    id: ID
    # How long before the event start will the check-in end (in seconds)
    checkInBuffer: Int
    # How long the event check-in will last (in seconds)
    checkInDuration: Int
    # Whether check-in is enabled for this event
    checkInEnabled: Boolean
    # Rough categorization of event tier, denoting relative importance in the
    # competitive scene
    competitionTier: Int
    # When the event was created (unix timestamp)
    createdAt: Timestamp
    # Last date attendees are able to create teams for team events
    deckSubmissionDeadline: Timestamp
    # Maximum number of participants each Entrant can have
    entrantSizeMax: Int @deprecated( reason: "Migrate to teamRosterSize" )
    # Minimum number of participants each Entrant can have
    entrantSizeMin: Int @deprecated( reason: "Migrate to teamRosterSize" )

    # Whether the event has decks
    hasDecks: Boolean
    # Are player tasks enabled for this event
    hasTasks: Boolean
    # Arguments
    # type: [Not documented]
    images(type: String): [Image]
    # Whether the event is an online event or not
    isOnline: Boolean

    # Markdown field for match rules/instructions
    matchRulesMarkdown: String
    # Title of event set by organizer
    name: String
    # Gets the number of entrants in this event
    numEntrants: Int

    # The phases that belong to an event.
    #
    # Arguments
    # state: Filter phases by state. If not specified will default to
    # all phases
    # phaseId: Optionally only return results for this phase
    # TO settings for prizing
    prizingInfo: JSON
    publishing: JSON
    # Markdown field for event rules/instructions
    rulesMarkdown: String
    # Id of the event ruleset
    rulesetId: Int
    # Settings pulled from the event ruleset, if one exists
    rulesetSettings: JSON @deprecated( reason: "Use ruleset" )
    slug: String
    startAt: Timestamp
    images(type: String): [Image]
    # Paginated stations on this event
    #
    # Arguments
    # query: [Not documented]
    # Last date attendees are able to create teams for team events
    teamManagementDeadline: Timestamp
    # If this is a teams event, returns whether or not teams can set custom names
    teamNameAllowed: Boolean
    # Team roster size requirements
    tournament: Tournament
    # The type of the event, whether an entrant will have one participant or multiple
    type: Int
    # When the event was last modified (unix timestamp)
    updatedAt: Timestamp
    # Whether the event uses the new EventSeeds for seeding
    useEventSeeds: Boolean
    # The entrant (if applicable) for a given user in this event
    #
    # Arguments
    # userId: User to get entrant for. Defaults to currently logged
    # in user.
    userEntrant(userId: ID): Entrant
    videogame: Videogame
    # The waves being used by the event
    #
    # Arguments
    # phaseId: Waves filtered by phaseId, returns all if not set.
    waves(phaseId: ID): [Wave]
}

type Videogame {
    id: ID

    displayName: String
    # Arguments
    # type: [Not documented]
    images(type: String): [Image]
    name: String
    slug: String
}

type EntrantConnection {
    pageInfo: PageInfo
    nodes: [Entrant]
}

type Entrant {
    id: ID
    event: Event
    # Entrant's seed number in the first phase of the event.
    initialSeedNum: Int
    isDisqualified: Boolean
    # The entrant name as it appears in bracket: gamerTag of the participant or team
    # name
    name: String
}

input UserTournamentsPaginationQuery {
    page: Int
    # How many nodes to return for the page. Maximum value of 500
    perPage: Int
    sortBy: String
    filter: UserTournamentsPaginationFilter
}

input UserTournamentsPaginationFilter {
    past: Boolean
    upcoming: Boolean
    search: PaginationSearchType
    videogameId: [ID]
    tournamentView: String
    excludeId: [ID]
}

input PaginationSearchType {
    fieldsToSearch: [String]
    searchString: String
}

input EventFilter {
    videogameId: [ID]
    type: [Int]
    published: Boolean
    id: ID
    ids: [ID]
    slug: String
    fantasyEventId: ID
    fantasyRosterHash: String
}

type PageInfo {
    total: Int
    totalPages: Int
    page: Int
    perPage: Int
    sortBy: String
    filter: JSON
}

scalar Timestamp

scalar JSON

